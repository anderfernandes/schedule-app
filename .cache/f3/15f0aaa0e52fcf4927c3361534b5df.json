{"id":"node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","dependencies":[{"name":"/home/anderson/schedule-app/package.json","includedInParent":true,"mtime":1566425748960},{"name":"/home/anderson/schedule-app/node_modules/date-fns/package.json","includedInParent":true,"mtime":1566421949314},{"name":"../../toDate/index.js","loc":{"line":1,"column":19},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/toDate/index.js"},{"name":"../startOfUTCISOWeek/index.js","loc":{"line":2,"column":30},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js"},{"name":"../startOfUTCISOWeekYear/index.js","loc":{"line":3,"column":34},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getUTCISOWeek;\n\nvar _index = _interopRequireDefault(require(\"../../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../startOfUTCISOWeek/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../startOfUTCISOWeekYear/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = (0, _index.default)(dirtyDate);\n  var diff = (0, _index2.default)(date).getTime() - (0, _index3.default)(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}"},"sourceMaps":null,"error":null,"hash":"16dd17889aceece4146d85643fdc5b8a","cacheData":{"env":{}}}