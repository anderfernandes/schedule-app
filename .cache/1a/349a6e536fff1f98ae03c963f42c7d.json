{"id":"node_modules/date-fns/esm/eachWeekendOfInterval/index.js","dependencies":[{"name":"/home/anderson/schedule-app/package.json","includedInParent":true,"mtime":1567532451360},{"name":"/home/anderson/schedule-app/node_modules/date-fns/esm/eachWeekendOfInterval/package.json","includedInParent":true,"mtime":499162500000},{"name":"../eachDayOfInterval/index.js","loc":{"line":1,"column":30},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/eachWeekendOfInterval/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/eachDayOfInterval/index.js"},{"name":"../isSunday/index.js","loc":{"line":2,"column":21},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/eachWeekendOfInterval/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/isSunday/index.js"},{"name":"../isWeekend/index.js","loc":{"line":3,"column":22},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/eachWeekendOfInterval/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/isWeekend/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachWeekendOfInterval;\n\nvar _index = _interopRequireDefault(require(\"../eachDayOfInterval/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isSunday/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../isWeekend/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name eachWeekendOfInterval\n * @category Interval Helpers\n * @summary List all the Saturdays and Sundays in the given date interval.\n *\n * @description\n * Get all the Saturdays and Sundays in the given date interval.\n *\n * @param {Interval} interval - the given interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} an array containing all the Saturdays and Sundays\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Lists all Saturdays and Sundays in the given date interval\n * var result = eachWeekendOfInterval({\n *   start: new Date(2018, 8, 17),\n *   end: new Date(2018, 8, 30)\n * })\n * //=> [\n * //   Sat Sep 22 2018 00:00:00,\n * //   Sun Sep 23 2018 00:00:00,\n * //   Sat Sep 29 2018 00:00:00,\n * //   Sun Sep 30 2018 00:00:00\n * // ]\n */\nfunction eachWeekendOfInterval(interval) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var dateInterval = (0, _index.default)(interval);\n  var weekends = [];\n  var index = 0;\n\n  while (index++ < dateInterval.length) {\n    var date = dateInterval[index];\n\n    if ((0, _index3.default)(date)) {\n      weekends.push(date);\n      if ((0, _index2.default)(date)) index = index + 5;\n    }\n  }\n\n  return weekends;\n}"},"sourceMaps":null,"error":null,"hash":"baf469145fa349cfa51aed7116dc7165","cacheData":{"env":{}}}