{"id":"node_modules/date-fns/esm/differenceInBusinessDays/index.js","dependencies":[{"name":"/home/anderson/schedule-app/package.json","includedInParent":true,"mtime":1566425748960},{"name":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/package.json","includedInParent":true,"mtime":499162500000},{"name":"../isValid/index.js","loc":{"line":1,"column":20},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/isValid/index.js"},{"name":"../isWeekend/index.js","loc":{"line":2,"column":22},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/isWeekend/index.js"},{"name":"../toDate/index.js","loc":{"line":3,"column":19},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/toDate/index.js"},{"name":"../differenceInCalendarDays/index.js","loc":{"line":4,"column":37},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInCalendarDays/index.js"},{"name":"../addDays/index.js","loc":{"line":5,"column":20},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/addDays/index.js"},{"name":"../isSameDay/index.js","loc":{"line":6,"column":22},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/isSameDay/index.js"},{"name":"../_lib/toInteger/index.js","loc":{"line":7,"column":22},"parent":"/home/anderson/schedule-app/node_modules/date-fns/esm/differenceInBusinessDays/index.js","resolved":"/home/anderson/schedule-app/node_modules/date-fns/esm/_lib/toInteger/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = differenceInBusinessDays;\n\nvar _index = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isWeekend/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../differenceInCalendarDays/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../addDays/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../isSameDay/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * var result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n */\nfunction differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateLeft = (0, _index3.default)(dirtyDateLeft);\n  var dateRight = (0, _index3.default)(dirtyDateRight);\n  if (!(0, _index.default)(dateLeft) || !(0, _index.default)(dateRight)) return new Date(NaN);\n  var calendarDifference = (0, _index4.default)(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = (0, _index7.default)(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = (0, _index5.default)(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!(0, _index6.default)(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += (0, _index2.default)(dateRight) ? 0 : sign;\n    dateRight = (0, _index5.default)(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}"},"sourceMaps":null,"error":null,"hash":"40f8d4576ad006ac7fa0361517626bd9","cacheData":{"env":{}}}